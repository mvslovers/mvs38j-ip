         MACRO
&LABEL   UMOVE ,
.*---------------------------------------------------------------------
.* Copyright 2002 James M. Morrison
.* See .DOC for documentation
.*---------------------------------------------------------------------
         LCLC  &NDX
&NDX     SETC  '&SYSNDX'
&LABEL   IM#SECT LABEL                 conditionally generate label
         MEXIT
.DOC     ANOP
.*---------------------------------------------------------------------
.*  UMOVE  - Build parmlist for U370MOVE
.*
.*  U370MOVE calling conventions:
.*
.*  Entry:   R0 = reserved; must be zero
.*           R1 = address of parmlist
.*
.*  Exit:    R15 = return code
.*
.*           00  = success
.*                 R0 = length of buffer consumed
.*                 R1 = address of buffer
.*
.*           08  = truncation occurred; output buffer incomplete
.*                 R0 = zero
.*                 R1 = zero
.*
.*  Given a UMOVE parmlist, U370MOVE will construct an output buffer
.*  according to parmlist specifications.
.*
.*  The parameter list is composed of Opcodes, and their associated
.*  Operands.
.*
.*  Conceptually, U370MOVE is the "machine" which executes the
.*  parmlist "program".
.*
.*
.*  The parameters to UMOVE are specified via &SYSLST
.*  Each &SYSLST operand may take the following forms:
.*
.*       'string'       Literal string (EBCDIC, assembler DC)
.*
.*       (sublist)      Operand sublist; first sublist operand
.*                      specifies Type
.*
.*  Types are divided into the following classes:
.*
.*       STG   Storage reference; storage outside parmlist
.*
.*       LIT   Literal reference; storage follows opcode or operands
.*
.*       REG   Register contents; refers to register contents rather
.*             than storage
.*
.*       OPT   Option specification; no storage referenced
.*
.*       JUMP  Continue parmlist at non-consecutive location
.*
.*       FINI  Terminate parmlist
.*
.*  The following default format conversions apply to each type:
.*
.*             STG   Do not convert to EBCDIC
.*             LIT   Do not convert to EBCDIC
.*             REG   Do     convert to EBCDIC
.*
.*  Below, the full type is specified; throughout UMOVE, only the
.*  first character is necessary to identify the class.
.*  The dash (-) is optional.
.*
.*  The Opcode and Operands field show the generated fields.
.*  Opcode is given in bits.
.*
.*  S(Bddd)  represents an S-con; B=Base reg; ddd=displacement
.*  ALn(x)   represents an A-con; n is the A-con's length
.*  Register specifications below should not usually be R14-R1,
.*           which U370MOVE uses during its calling sequence
.*  B=0      in STG class, implies PSA        reference
.*  B=1      in STG class, implies dictionary reference
.*  Default  dictionary is pointed to by TGD@DICT
.*  Default  register contents are contained in savearea pointed
.*           to by U370MOVE's caller's R13
.*  Default  output buffer is provided by U370MOVE, and 1024 bytes
.*  Lengths  specified as register contents are assumed to be the
.*           full 32-bit register contents (MVCLE lengths), for
.*           upwards compatibility with later MVS versions; using
.*           MVCL lengths has no value, since padding ever occurs.
.*
.*  -------------------------------------------------------------------
.*  ONLY THE FUNCTIONS MARKED ".*Y" ARE CURRENTLY IMPLEMENTED
.*  -------------------------------------------------------------------
.*
.*  Supported/planned sublist types, and their associated operands are:
.*
.*  Type       Opcode     Operands            Notes
.*  --------   ---------- ------------------- -------------------------
.*
.*  STG-LS     0000 L-1   S(Bddd)             L  = length
.*                                        ---
.*  STG-SAL    0001 0000  S(Bddd)             +00(4) = address
.*                                            +04(4) = length
.*
.*  STG-LLS    0001 LL    ALn(L),S(Bddd)      LL = length of length
.*                                            L  = length
.*                                        ---
.*  STG-RLS    0010 Rlen  S(Bddd)             Rlen  = length  reg
.*                                        ---
.*  STG-ALP    0011 Rpair                     Register pair
.*                                            Rpair in range (R0-R14)
.*                                            Rpair need not be even
.*                                            Rpair+0 = address reg
.*                                            Rpair+1 = length  reg
.*                                            Register wrapping is not
.*                                            supported
.*
.*  STG-ARLR   0011 1111  Raddr,Rlen          Raddr = address reg
.*                                            Rlen  = length  reg
.*
.*             ------------------------------
.*
.*  LIT-L      0100 L     Literal             L = length
.*                                        ---
.*  LIT-LL     0101 LL    ALn(L) Literal      LL = length of length
.*                                            L  = length
.*                                        ---
.*  LIT-PRB    0110 0000  (0000,Rdup),Byte    Rdup = length to pad
.*                                            (0000,Rdup) is one byte
.*
.*  LIT-PLLB   0110 0000  (1000,LL),ALn(L),Byte
.*                                            LL = length of length
.*                                            L  = length of pad
.*
.*  LIT-PLB    0110 L     Byte                L = length to pad
.*                                        ---
.*             0111 ....                      extended opcodes
.*
.*             ------------------------------
.*
.*  REG-R      1000 R                         R = register
.*                                        ---
.*  REG-RR     1001 zzzz  Ra:Rb               register range
.*                                            Ra = first register
.*                                            Rb = last  register
.*                                            Register wrapping is not
.*                                            currently supported
.*                                        ---
.*  REG-MR     1010 zzzz  MASK,R              STCM mask, register
.*                                        ---
.*             1011 ....                      extended opcodes
.*
.*             ------------------------------
.*
.*  OPT-DS     1100 0000  S(Bddd)             Dictionary address
.*                                            B may not be R1
.*
.*             1100 0001                      unassigned
.*
.*  OPT-DR     1100 Rdict                     Dictionary reg
.*                                            Rdict may not be R14-R1
.*
.*             1100 1110                      unassigned
.*
.*             1100 1111                      unassigned
.*                                        ---
.*             1101 0000                      unassigned
.*
.*  OPT-GBL    1101 nnnn  ALn(gggg)           Global options
.*                                            nnnn = length
.*                                        ---
.*  OPT-S0F    1110 0000  S(Bddd)             Reg sequence R0:R15
.*
.*             1110 0001                      unassigned
.*
.*  OPT-RSA    1100 Rsa                       Regs from savearea
.*                                            pointed to by Rsa
.*                                            Rsa may not be R14-R1
.*
.*             1110 1110                      unassigned
.*
.*             1110 1111                      unassigned
.*                                        ---
.*             1111 0000                      unassigned
.*
.*  OPT-BL2S   1111 0001  AL2(L),S(Bddd)      Output buffer
.*                                            L = buffer length
.*
.*  OPT-BP     1111 Rbuf                      Output buffer pair
.*                                            Rbuf+0 = address
.*                                            Rbuf+0 may not be R14-R1
.*                                            Rbuf+1 = length
.*
.*  OPT-BL4S   1111 1110  AL4(L),S(Bddd)      Output buffer
.*                                            L = buffer length
.*
.*             1111 1111                      unassigned
.*
.*             ------------------------------
.*
.*             0111 ....                      extended opcodes
.*             1011 ....                      extended opcodes
.*
.*  JUMP       0111 0000  S(Bddd)             Parmlist jump
.*
.*  FINI       0111 1111                      Terminate parmlist
.*
.*             ------------------------------
.*
.*  zzzz       No options currently defined
.*
.*  gggg       No global options currently defined
.*
.*
.*
.*
.*
.*
.*
.*
.*
.*
.*
.*
.*---------------------------------------------------------------------
         MEND
