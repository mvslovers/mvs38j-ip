         MACRO
&LABEL   IM#INSTF &SPEC,&REG=R0,&LST=
.*
.* Copyright 2001, 2002 James M. Morrison
.*
.*---------------------------------------------------------------------
.* See notes below for details and syntax examples - ASMF version
.*---------------------------------------------------------------------
         GBLA  &#SUBLN
         GBLA  &#SUBLNI(8)
         GBLC  &#SUBLC(8)
         LCLA  &NSL           # &SYSLIST(1) operands
         LCLA  &NI            # &LST(n) operands specified
         LCLA  &I
         LCLC  &JUNK
.*
&LABEL   XMI#SECT LABEL
.*
&NSL     SETA  N'&SYSLIST(1)
         MNOTE *,'IM#INSTR LST &LST'
         MNOTE *,'IM#INSTR NSL &NSL'
.*
         IM#SUBL &LST(1),&LST(2),&LST(3),&LST(4),&LST(5),&LST(6)
&NI      SETA  &#SUBLN
         MNOTE *,'IM#INSTR NI &NI'
         AIF   (&#SUBLN GT 1).NOLALR
.*
         IM#SUBL &SPEC(1)
         AIF   (&#SUBLN EQ 1).LALR
.*
.NOLALR  MNOTE *,'IM#INSTF - not LALR'
         AIF   (&NSL EQ 0).NOSPEC
         MNOTE *,'IM#INSTR LST(1) &LST(1)'
         MNOTE *,'IM#INSTR LST(2) &LST(2)'
         MNOTE *,'IM#INSTR LST(3) &LST(3)'
         MNOTE *,'IM#INSTR LST(4) &LST(4)'
         MNOTE *,'IM#INSTR SPEC(1) &SPEC(1)'
         MNOTE *,'IM#INSTR SPEC(2) &SPEC(2)'
         MNOTE *,'IM#INSTR SPEC(3) &SPEC(3)'
         MNOTE *,'IM#INSTR SPEC(4) &SPEC(4)'
         MNOTE *,'IM#INSTR SYSLIST(1) &SYSLIST(1)'
         MNOTE *,'IM#INSTR SYSLIST(2) &SYSLIST(2)'
         MNOTE *,'IM#INSTR SYSLIST(3) &SYSLIST(3)'
         MNOTE *,'IM#INSTR SYSLIST(4) &SYSLIST(4)'
.*
.LOOP    ANOP
         MNOTE *,'IM#INSTF *************  LOOP  ********************'
&I       SETA  &I+1
&JUNK    SETC  '&SYSLIST(&I,1)'
         MNOTE *,'IM#INSTF I=&I SYSLIST(I,1) &JUNK'
&JUNK    SETC  '&SYSLIST(&I,2)'
         MNOTE *,'IM#INSTF I=&I SYSLIST(I,2) &JUNK'
&JUNK    SETC  '&SYSLIST(&I,3)'
         MNOTE *,'IM#INSTF I=&I SYSLIST(I,3) &JUNK'
&JUNK    SETC  '&SYSLIST(&I,4)'
         MNOTE *,'IM#INSTF I=&I SYSLIST(I,4) &JUNK'
.*
         MNOTE *,'INSTR->SUBL I=&I SYSLIST(I) &SYSLIST(&I)'
         IM#SUBL &SYSLIST(&I)
.*
         MNOTE *,'INSTR->SUBL I=&I LST(I) &LST(&I)'
         IM#SUBL &LST(&I)
.*
         IM#IGENF &SYSLIST(&I)
         AIF   (&I LT &NI).LOOP
         MEXIT
.*
.LALR    MNOTE *,'INSTR->LALR &REG,&LST'
         IM#LALR &REG,&LST
         MEXIT
.*
.NOSPEC  MNOTE 8,'IM#INSTR missing specification'
         MEXIT
.*---------------------------------------------------------------------
.* Function: Generate one or more instructions from specified (SPEC)
.* operands.
.*
.* &REG     - work register (may not always be used); generally the
.*            register into which the calling macro wishes to place
.*            a value.
.* &SPEC    - instruction specification
.*
.* SPEC Syntax samples (REG=Rx):
.*
.* SPEC                      calls     generates
.* ------------------------- -------   --------------------------------
.* (R3)                      IM#LALR   LR    Rx,R3
.* FIELD                     IM#LALR   LA    Rx,FIELD
.* *FIELD                    IM#LALR   L     Rx,FIELD
.* .FIELD                    IM#LALR   LH    Rx,FIELD
.*
.* -CLEAR-                   IM#LALR   SLR   Rx,Rx
.* -ZERO-                    IM#LALR   SR    Rx,Rx
.* -0-                       IM#LALR   SR    Rx,Rx
.*
.* ((LH,FIELD))              IM#IGEN   LH    Rx,FIELD
.* ((ICM,8,FIELD))           IM#IGEN   ICM   Rx,8,FIELD
.* ((-ZERO-),(IC,F1))        IM#IGEN   SR    Rx,Rx
.*                                     IC    Rx,F1
.* ((MVI,F,8))               IM#IGEN   MVI   F,8
.* ((MVC,F1,F2))             IM#IGEN   MVC   F1,F2
.*
.* ((-0-),(IC,F),(OI,X,32))  IM#IGEN   SR    Rx,Rx
.*                           IM#IGEN   IC    Rx,F
.*                           IM#IGEN   OI    X,32
.*
.* The basic function of this macro is to allow our callers to offer
.* the coder the opportunity to "reach into" the macro expansion
.* to add a few instructions.  Some of the syntax is as old as the
.* hills: (Rx) and *FIELD have been in common usage since I started
.* coding, and I have carried those syntax forms forward.
.*
.* If you wish to generate more than one instruction, the syntax must
.* conform to the IM#IGEN format; the IM#LALR format is mostly for
.* backwards compatability which only requires one instruction.
.* For IM#IGEN, each sublist specified will generate one instruction.
.*
.* Not all instructions are capable of being generated by IM#INSTR.
.* IM#LALR only supports the LR, LA, L, and LH instructions.
.* IM#IGEN should support all of the RR, RX, and RS instruction types,
.* and a handful of others; see IM#IGEN for these details.
.* Both IM#IGEN and IM#LALR support the -x- forms.
.*
.* The coder is strongly encouraged to read the macro expansion to
.* assure that what gets generated is what was intended, at least
.* until some general familiarity with IM#INSTR is obtained.
.*---------------------------------------------------------------------
         MEND
