         MACRO
&NAME    UPROC &L=(19*4),&ID=NONE,&WA=SAVEAREA,&INIT=XC,&CPD=(N,0),    +
               &ENTRY=R15
.*
.* Copyright 2001, 2002 James M. Morrison
.*
         GBLA  &G#ALIGN
         GBLC  &GFUNC
         GBLC  &GUPROCI            ID= passed to UPEND, UFINI
         GBLC  &GWATGD
         GBLC  &GUPROCP(8)         CSECT-specific task persistent data
.*                                 CPD(1) = CPD addition length
.*                                 CPD(2) = null or ESTAE
         LCLC  &EYE
         LCLC  &TDXD,&XCO,&XCL
         LCLA  &ALIGN,&XCN
.*
&ALIGN   SETA  &G#ALIGN            storage alignment
&EYE     SETC  '&NAME'(1,4).'DSA'  XMITDSA/RECVDSA/DASTDSA
&GUPROCI SETC  '&ID'               tell UPEND ID=
&GUPROCP(1) SETC '&CPD(1)'         tell DSACPD
&GUPROCP(2) SETC '&CPD(2)'         tell DSACPD
&GUPROCP(3) SETC '&CPD(3)'         tell DSACPD
.*
         PUSH  PRINT                                              UPROC
         AIF   ('&ID' EQ 'MAIN').DSAEX
         PRINT OFF                 see xxxx370 (ID=MAIN)          UPROC
.DSAEX   DSAEX ,                   SX, SA, EQUs
         DSACPD ,                  CSECT Persistent Data
*----------------------------------------------------------------------
&NAME    CSECT ,
*
         EJECT ,
         POP   PRINT                                              UPROC
&NAME    CSECT ,
         USING *,&ENTRY
         B     PASTID
PROCHDR  DS    0F
         DC    AL1(IDX-ID)
ID       DC    CL8'&NAME'              CSECT name
         DC    CL8'&SYSDATE'           assembly date MM/DD/YY
         DC    CL7' &SYSTIME'          assembly time HH.MM
IDX      EQU   *
         AIF   ('&INIT' NE 'NONE').PROCFN
PASTID   DS    0H
         MEXIT ,
.PROCFN  ANOP
*
PROC@FIN DC    A(FINIBLOK)             @ UFINI - FINIBLOK
L$PROCHD EQU   *-PROCHDR               length of UPROC header
*
PASTID   STM   R14,R12,SXR14-SXBASE(R13)    save caller's regs
         LR    R12,R15
         USING &NAME,R12          BASE REGISTER ... ALL CSECTS
         DROP  R15
.*
         AIF   ('&ID' NE 'MAIN').NORMAL
*----------------------------------------------------------------------
*  ID=MAIN - Allocate DSA pool storage, initialize TGD
*----------------------------------------------------------------------
.*
.* R8    MAIN - length of entire DSA stack (pool)
.* R10   MAIN - TGDSA1
.* R11   base reg - TGD
.* R12   base reg - CSECT
.* R13   base reg - SA
.* R14   scratch
.*
         ICM   R0,15,QTGD              verify TGD's offset = 0
         BZ    TGDOFFOK
*
*  Installation error, check Linkage Editor object deck sequencing;
*  TGD offset must be ZERO
*
         WTO   '&NAME UPROC install error'
         ABEND 99                      installation error, check LKED
*
TGDOFFOK DS    0H
         L     R8,LDSAPOOL             length of DSA pool
         LA    R8,4095(,R8)               round to
         SRL   R8,12                        next
         SLL   R8,12                      page boundary
*
*  Allocate DSA pool storage, set to x'00'
*
         GETMAIN RU,LV=(R8),BNDRY=PAGE alloc DSA pool storage
         LR    R11,R1
         UZERO (R11),(R8)              clear storage to x'00'
         USING &GFUNC.WA,R11           TGD at begin of DSA pool
*
*  Initialize TGD
*
         MVC   TGDEYE,=CL8'&EYE'                 TGD eyecatcher
         ST    R8,TGDLDSA                        DSA pool length
         MVC   TGDUPFX+(SXID-SX)(L'SXID),ID      TGDSA1 SX ID
*
*  Link SA1 into savearea chain
*
         LA    R10,TGDSA1              xxxx370's 1st SA
         ST    R10,8(,R13)             forward ptr to SA1
         ST    R13,4+TGDSA1            backward ptr to system's SA
         LM    R0,R1,SXR0-SXBASE(R13) restore caller's parm reg
         ST    R1,TGD@PARM             save entry R1
         LR    R13,R10                 ready for normal UPROC now
*
*  Initialize DSA pool - AP00 won't modify R0,R1
*
         UCALL U370AP00                xxxx370 appl startup
*----------------------------------------------------------------------
*  Resume normal entry linkage, setup ID=MAIN DSA
*----------------------------------------------------------------------
.NORMAL  USING &GFUNC.WA,R11      ALWAYS
         AIF   ('&INIT(1)' EQ 'XC').XC
         AIF   ('&INIT' EQ 'MVCL').MVCL
         AIF   ('&INIT' EQ 'MIN').MIN
         AIF   ('&INIT' EQ 'CUST').CUST
         MNOTE 8,'UPROC - unrecognized INIT value'
         MEXIT ,
.*---------------------------------------------------------------------
.*  CUSTOM     SA initialization - SA cleared, standard SA linkage
.*  U370AP00 sets up SX to support this; useful another day for
.*  for such things as tracing, timing, ...
.*  Probably should be used in conjunction with U#SET; modify UPROC
.*  to override caller's UPROC specification
.*---------------------------------------------------------------------
.CUST    L     R3,QSX                  DSA pool offset to SX
         AR    R3,RDSA                 R3 @ SX
         L     R5,SX@INIT-SX(,R3)      U370AP00 set @ DSA init routine
         BALR  R4,R5                   initialize DSA
         AGO   .WA
.*---------------------------------------------------------------------
.*  XC         SA initialization - SA cleared, standard SA linkage
.*---------------------------------------------------------------------
.XC      L     R3,QSA                  DSA pool offset to SA
         AR    R3,RDSA                 @ our SA
&XCO     SETC  '(SXR0-SXBASE)'         length string
&XCL     SETC  '(&L-(SXR0-SXBASE))'    offset string
         AIF   (N'&INIT EQ 1).XCLAST
.XCLOOP  ANOP
&XCO     SETC  '(&XCN*256)+(SXR0-SXBASE)'        offset string
&XCL     SETC  '(&L-(&XCN*256))-(SXR0-SXBASE)'   length string
         AIF   (&XCN+1 EQ &INIT(2)).XCLAST
         XC    &XCO.(256,R3),&XCO.(R3)
&XCN     SETA  &XCN+1
         AGO   .XCLOOP
.XCLAST  XC    &XCO.(&XCL,R3),&XCO.(R3)
         ST    R3,SX@FWD-SXBASE(,R13)  caller's forward ptr @ our SA
         ST    R13,SX@BACK-SXBASE(,R3) our backward ptr @ caller's SA
         LR    R13,R3                  R13 @ our SA
         AGO   .WA
.*---------------------------------------------------------------------
.*  MVCL       SA initialization - SA cleared, standard SA linkage
.*---------------------------------------------------------------------
.MVCL    L     R3,QSA                  DSA pool offset to SA
         AR    R3,RDSA                 @ our SA
         LA    R14,SXR0-SXBASE(,R3)    1st field to clear
         LH    R15,FBLSACL             length to clear
         SLR   R9,R9                   MVCL source length
         MVCL  R14,R8                  clear selected portion of SA
         ST    R3,SX@FWD-SXBASE(,R13)  caller's forward ptr @ our SA
         ST    R13,SX@BACK-SXBASE(,R3) our backward ptr @ caller's SA
         LR    R13,R3                  R13 @ our SA
         AGO   .WA
.*---------------------------------------------------------------------
.*  MIN        SA initialization - SA not cleared, standard SA linkage
.*---------------------------------------------------------------------
.MIN     L     R3,QSA                  DSA pool offset to SA
         AR    R3,RDSA                 @ our SA
         ST    R3,SX@FWD-SXBASE(,R13)  caller's forward ptr @ our SA
         ST    R13,SX@BACK-SXBASE(,R3) our backward ptr @ caller's SA
         LR    R13,R3                  R13 @ our SA
.*
.WA      AIF   ('&WA' EQ '').DONE
         USING &WA,R13            SAVEAREA AND WORKAREA
.DONE    EJECT ,
         MEXIT
.DOC     ANOP
.*---------------------------------------------------------------------
.*  Entry procedure for xxxx370 code
.*
.*  Allocates Extended Savearea (DSA - see DSAEX DSECT), sets up
.*  registers for CSECT (see Standard xxxx370 Register Conventions)
.*
.*  Terminology:
.*
.*      SA        - Standard MVS 18-word savearea, plus whatever
.*                  extra stuff the CSECT wants for a workarea
.*                  Each CSECT has a SA
.*
.*      SX        - Savearea extension; precedes SA
.*                  Has two eye-catchers (CSECT name), which is
.*                  helpful in identifying SAs in a dump
.*                  Each CSECT has a SX
.*
.*      CPD       - CSECT's Task Persistent Data - DSACPD
.*                  UESTAE macro support, plus whatever the CSECT
.*                  wishes to be preserved across calls (if anything)
.*                  Each CSECT has a CPD; it's length varies
.*
.*      DSA       - SX + SA
.*
.*      DSA pool  - DSA stack, plus room for TGD and CPDs
.*                  equivalent to UPROC GETMAIN
.*
.*      DSA stack - SA + SX stack only
.*
.*  Operands:
.*
.*      WA       - Label of CSECT's workarea DSECT (SA)
.*                 UPROC clears this workarea to x'00'
.*                 and establishes an SX in front of it
.*
.*      L        - length of workarea DSECT
.*                 (not including the SX prefix length)
.*
.*      ID       - 4 character CSECT identifier
.*                 ID=MAIN (xxxx370) causes special initialization
.*
.*      INIT     - Controls SA linkage and if/how SA cleared
.*                 The default is XC
.*
.*                 XC   - normal  entry conventions, SA cleared
.*                        SA will be cleared using XC instructions
.*                        (XC,n) will generate n XCs
.*
.*                 MVCL - normal  entry conventions, SA cleared
.*                        SA will be cleared using MVCL instruction
.*
.*                 CUST - normal  entry conventions, SA cleared
.*                        calls customized DSA init routines
.*                        set up by U370AP00 which select XC or MVCL
.*                        as dictated by SA length
.*
.*                 MIN  - minimal entry conventions, SA not cleared
.*                        The SA is located & caller's SA linked
.*
.*      CPD(1)   - CPD present - Y or N
.*
.*      CPD(2)   - Length of user's CPD additions
.*
.*      CPD(3)   - null or ESTAE
.*                 If ESTAE, space for ESTAE support will be
.*                 provided at the beginning of the user's CPD
.*
.*      ENTRY    - register number pointing at beginning of CSECT
.*                 when it is first called; default R15
.*                 SVCs specify R6
.*
.*  Standard xxxx370 Register Conventions must be observed in order
.*  for UPROC to process normally:
.*
.*      R11  @ TGD - Task Global Data (unique per TCB)
.*                   See WATGD macro
.*                   The TGD is embedded at the front of WAxxxx.
.*
.*      R12  @ caller's UPROC expansion (R12 is CSECT basereg)
.*
.*      R13  @ caller's SA, as set up by UPROC
.*
.*      R14  @ caller's return address
.*
.*      R15  @ called CSECT's UPROC expansion
.*
.*  Upon completion of UPROC, only R0-R2 may be considered valid.
.*  Other register contents must be retrieved from the caller's SA
.*
.*  When ID=MAIN is coded in xxxx370 CSECT, UPROC establishes the
.*  above register conventions, as well as allocating the DSA pool,
.*  initializing important parts of the TGD, and establishing the
.*  initial DSAs for xxxx370.
.*
.*  UPROC does not help establish multiple base regs, small is
.*  (usually) beautiful when it comes to CSECTs
.*
.*  Corequisites:
.*
.*      UPEND macro  - returns control to caller, generates patch area.
.*                     For ID=MAIN CSECT, FREEMAINs DSA pool.
.*
.*      WAxxxx macro - needed for UPROC expansion (contains TGD)
.*
.*      UFINI macro  - place at end of CSECT, generates the CSECT's
.*                     workarea pseudo-register.  For G#DSAM=QCON,
.*                     also generates the related Q-con.
.*
.*
.*  Internals notes
.*  ---------------
.*
.*  SX is immediately followed by SA, and is allocated from the
.*  DSA stack created by xxxx370.  The first SA used within
.*  xxxx370 is TGDSA1, allocated to the ID=MAIN CSECT
.*
.*  UPROC verifies that the offset to the TGD pseudo-register
.*  is zero; if it's not, R11 would be hosed and the application
.*  falls down.  Making sure that the TGD pseudo-register offset
.*  is zero should be accomplished by including the xxxx370 CSECT
.*  as the first object deck in the linkage editor's input.
.*
.*  From a savearea chain perspective, the TGD is merely another SA.
.*  TGDSA1 is the 2nd savearea when chasing the savearea chain
.*  from TCBFSAB.  The 1st savearea from TCBFSAB is the savearea the
.*  system provided to xxxx370.  All this presumes xxxx370 is the
.*  first program called in our TCB, which is true in batch or if
.*  xxxx370 has been ATTACHed.
.*
.*  Our recovery scheme requires that UPEND clear the caller's forward
.*  savearea pointer upon return of the current CSECT, so U370STAE
.*  can identify the current (ABENDing) CSECT by running the SA chain
.*  starting at TCBFSAB.
.*
.*  Currently there is some minimal CPD overhead for ESTAE even
.*  when ESTAE support is not provided.  Makes life simpler
.*  in U370STAE
.*
.*  Dependencies: The following CSECTs are highly dependent upon
.*  the implementation of UPROC:
.*
.*      U370AP00 - numerous
.*      U370STAE - numerous, including secondary DSA
.*      U370ABND - erases callers' forward SA pointer
.*
.*  For details on public globals used, see U#SET macro.
.*  Some macros may also set "private" globals....
.*
.*---------------------------------------------------------------------
         MEND
